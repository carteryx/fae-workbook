## 运行脚本

```shell
#执行脚本    
./test.sh  #在当前目录找test.sh。
source ./test1.sh

#第一行一般为解释器
#!/bin/bash 
   
# 单行注释用#
# 一段要注释的代码用一对花括号括起来，定义成一个函数。
#多行注释
:<<EOF
注释内容...
注释内容...
EOF

#在双引号中，都保持特殊含义。美元符号用来引用变量，反引号则是执行子命令。
美元符号（$）和反引号（`）

clear; ls # ;使一行可以放置多个命令，节省空间。先后执行。
Command1 && Command2 #如果Command1运行成功，则继续运行Command2命令。
Command1 || Command2 #如果Command1运行失败，则继续运行Command2命令。
```

## 变量与字符串

1. **变量使用**

```shell
使用变量
myUrl="https://www.runoob.com"
echo $myUrl #加$，使用变量
echo ${myUrl}
unset myUrl #删除变量



数组名=(值1 $A ... 值n)  #空格分割数组元素,可写入变量$A
读取数组
${数组名[下标]}  #valuen=${array_name[n]}
@获取所有元素
echo ${array_name[@]}
\#取得数组元素的个数
length=${#array_name[@]}
length=${#array_name[*]}
\#取得数组单个元素的长度
lengthn=${#array_name[n]}

```

2. **字符串**

```shell
your_name='hhh'

#获取字符长度
echo ${#your_name} # 输出3,不带#则输出hhh

#加入参数
str="你的名字是\"$your_name\"! \n" 
echo -e $str

#子字符串
echo ${str:6:3}# 输出hhh,6为第几个（从0开始），3为向后获取字符个数。

#字符串截取很有用
var='http://www.aaa.com/123.htm'

# #、##从左边开始删除。# 到第一个指定的字符；## 到最后一个指定的字符。
# %、%%从右边开始删除。% 到第一个指定的字符；%% 到最后一个指定的字符。

1. #号运算符，*// 删除第一个 // 号及左边的所有字符
echo ${var#*//} #结果www.aaa.com/123.htm	即删除 http://

2. ##号运算符，*/ 删除最后（最右边）一个 / 号及左边的所有字符
echo ${var##*/} #结果是 123.htm 即删除 http://www.aaa.com/

3. %号运算符，/* 删除第一个 / 号及右边的字符
echo ${var%/*} #结果是：http://www.aaa.com

4. %% 运算符，/*删除最后（最左边）一个 / 号及右边的字符
echo ${var%%/*} #结果是：http:

5. ${var:n:m},n左起始位，m为截取字符数（向右）
echo ${var:0:5}	#结果是：http:

6. ${var:n},n左起始位，截取向右全部。
echo ${var:7}	#结果是 ：www.aaa.com/123.htm

7. ${var:0-n:m},n右起始位，m为截取字符数（向右）
echo ${var:0-7:3}	#结果是：123

8. ${var:0-n},n右起始位，截取向右全部。
echo ${var:0-7}	#结果是：123.htm

注：（左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）

# echo用法
read name 	#输入。read 命令从标准输入中读取一行,
echo "$name It is a test"	#输出
#结果
OK                     #标准输入
OK It is a test        #输出

echo -e "OK! \n" # -e 开启转义,\n换行
echo -e "OK! \c" # -e 开启转义 \c 不换行
echo "It is a test" > myfile	#显示结果定向至文件
echo '$name\"'	#原样输出字符串，不进行转义或取变量(用单引号)
echo `date`		#显示命令执行结果.反引号 `。结果将显示当前日期
```

## 脚本参数

1. **参数**

```shell
#script.sh内部，可以使用特殊变量，引用这些参数。
script.sh one two "a b" # "a b"是一个参数

#传递参数中如果包含空格，''或者""，将这个参数作为整体来接收
if [ -n "$1" ]; then
    echo "包含第一个参数"
else
    echo "没有包含第一参数"
fi
#注意：中括号 [] 与其中间的代码应该有空格隔开

$0：脚本文件名，即script.sh。
$1~$9：对应脚本的第一个参数到第九个参数。
$#：参数的总数。
$@：全部的参数，参数之间使用空格分隔。
$*：全部的参数，参数之间使用变量$IFS值的第一个字符分隔，默认为空格。
IFS=":" #自定义环境变量IFS（内部字段分隔符，Internal Field Separator），修改分隔标志。
```

2. **脚本传参实例：**

```shell
#编写脚本
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";
#执行结果，>>为在终端命令行执行命令。
```

终端执行命令：

`chmod +x test.sh `
`./test.sh 1 2 3`

输出结果：

> >执行的文件名：./test.sh
> >第一个参数为：1
> >第二个参数为：2
> >第三个参数为：3



```shell
#脚本参数$*和$@
echo "--\$* 演示---"
for i in "$*"; do
    echo $i
done
echo "--\$@ 演示---"
for i in "$@"; do
    echo $i
done
```

终端执行命令：

`./test.sh 1 2 3`

输出结果：

> >--\$* 演示 ---
> >1 2 3
> >--$@ 演示 ---
> >1
> >2
> >3

read命令除了读取键盘输入，可以用来读取文件:

```shell
#read命令，filename内容。done后的定向符<，将文件内容导向read命令。
#每次读取一行，存入变量myline，直到文件读取完毕。
filename='/etc/hosts'
while read myline
do
  echo "$myline"
done < $filename
```

## 循环与条件

```shell
gzip -t a.tar.gz
if [[ 0 == $? ]]; then
    echo "满足条件，操作代码或输出信息的地方"
else
    echo "不满足条件，操作代码或输出信息的地方"
fi

#用 && || 简化if else
gzip  -t a.tar.gz && echo "满足条件" || echo "不满足条件"

#/etc目录下的文件名循（两种写法）
for file in `ls /etc`
for file in $(ls /etc)

#for循环一般格式为：
for var in item1 item2 ... itemN
do
    command1
    command2
    ...
    commandN
done

#while 语句
while condition
do
    command
done

#case ... esac 为多选择语句
case 值 in
模式1)
    command1
    command2
    ...
    commandN
    ;;
模式2）
    command1
    command2
    ...
    commandN
    ;;
esac

continue与break
```

## 运算符

expr 是一款表达式计算工具，使用它能完成表达式的求值操作。

| 算术运算符 | 说明                                          | 举例                          |
| :--------- | :-------------------------------------------- | :---------------------------- |
| +          | 加法                                          | `expr $a + $b` 结果为 30。    |
| -          | 减法                                          | `expr $a - $b` 结果为 -10。   |
| *          | 乘法                                          | `expr $a \* $b` 结果为  200。 |
| /          | 除法                                          | `expr $b / $a` 结果为 2。     |
| %          | 取余                                          | `expr $b % $a` 结果为 0。     |
| =          | 赋值                                          | `a=$b`将把变量 b 的值赋给 a。 |
| ==         | 相等。用于比较两个数字，相同则返回 true。     | `[ $a == $b ]` 返回 false。   |
| !=         | 不相等。用于比较两个数字，不相同则返回 true。 | `[ $a != $b ]` 返回 true。    |

**注意：**条件表达式放在方括号之间，并且要有空格，例如: **`[$a==$b]`** 是错的，必须写成 **`[ $a == $b ]`**。

文件属性测试，比如一个文件是否存在，`[ -e $var ]`, 是否是目录，`[ -d $var ]`。
字符串比较, 比如两个字符串是否相同， `[[ $var1 = $var2 ]]`。
在进行字符串比较时，最好使用双中括号` [[ ]]`。因为单中括号可能会导致一些错误，因此最好避开它们。

| 关系运算符 | 说明                                                | 举例            |
| :--------- | :-------------------------------------------------- | :-------------- |
| -eq        | 两个数是equal，相等返回 true。                      | `[ $a -eq $b ]` |
| -ne        | 两个数是否no equal，不相等返回 true。               | `[ $a -ne $b ]` |
| -gt        | 左边的数是否greater than右边，如果是，则返回 true。 | `[ $a -gt $b ]` |
| -lt        | 左边是否less than右边，如果是，则返回 true。        | `[ $a -lt $b ]` |
| -ge        | 左边是否greater equal右边，如果是，则返回 true。    | `[ $a -ge $b ]` |
| -le        | 左边是否less equal右边，如果是，则返回 true。       | `[ $a -le $b ]` |

| 布尔运算符 | 说明                                                | 举例                                       |
| :--------- | :-------------------------------------------------- | :----------------------------------------- |
| !          | 非运算，表达式为 true 则返回 false，否则返回 true。 | `[ ! false ]` 返回 true。                  |
| -o         | 或运算，有一个表达式为 true 则返回 true。           | `[ $a -lt 20 -o $b -gt 100 ]`返回 true。   |
| -a         | 与运算，两个表达式都为 true 才返回 true。           | `[ $a -lt 20 -a $b -gt 100 ]` 返回 false。 |

| 逻辑运算符 | 说明       | 举例                                         |
| :--------- | :--------- | :------------------------------------------- |
| &&         | 逻辑的 AND | `[[ $a -lt 100 && $b -gt 100 ]]` 返回 false  |
| \|\|       | 逻辑的 OR  | `[[ $a -lt 100 \|\| $b -gt 100 ]]` 返回 true |

| 字符串运算符 | 说明                                        | 举例                       |
| :----------- | :------------------------------------------ | :------------------------- |
| =            | 检测两个字符串是否相等，相等返回 true。     | `[ $a = $b ]` 返回 false。 |
| !=           | 检测两个字符串是否不相等，不相等返回 true。 | `[ $a != $b ]` 返回 true。 |
| -z           | 检测字符串长度是否为zero，为0返回 true。    | `[ -z $a ]` 返回 false。   |
| -n           | 检测字符串长度是否不为0，不为 0 返回 true。 | `[ -n "$a" ] `返回 true。  |
| $            | 检测字符串是否不为空，不为空返回 true。     | `[ $a ]` 返回 true。       |

| 文件测试操作符 | 说明：检测文件                                               | 举例                        |
| :------------- | :----------------------------------------------------------- | :-------------------------- |
| -b file        | 是否是块设备文件，如果是，则返回 true。                      | `[ -b $file ]` 返回 false。 |
| -c file        | 是否是字符设备文件，如果是，则返回 true。                    | `[ -c $file ] `返回 false。 |
| -d file        | 是否是目录，如果是，则返回 true。                            | `[ -d $file ]` 返回 false。 |
| -f file        | 是否是普通文件（既不是目录，也不是设备文件）如果是，则返回 true。 | `[ -f $file ]` 返回 true。  |
| -g file        | 是否设置了 SGID 位，如果是，则返回 true。                    | `[ -g $file ]` 返回 false。 |
| -k file        | 是否设置了粘着位(Sticky Bit)，如果是，则返回 true。          | `[ -k $file ] `返回 false。 |
| -p file        | 是否是有名管道，如果是，则返回 true。                        | `[ -p $file ] `返回 false。 |
| -u file        | 是否设置了 SUID 位，如果是，则返回 true。                    | `[ -u $file ]` 返回 false。 |
| -r file        | 是否可读，如果是，则返回 true。                              | `[ -r $file ]` 返回 true。  |
| -w file        | 是否可写，如果是，则返回 true。                              | `[ -w $file ] 返回 true。   |
| -x file        | 是否可执行，如果是，则返回 true。                            | `[ -x $file ]` 返回 true。  |
| -s file        | 是否为空（文件大小是否大于0），不为空返回 true。             | `[ -s $file ]` 返回 true。  |
| -e file        | 检测文件（包括目录）是否存在，如果是，则返回 true。          | `[ -e $file ]` 返回 true。  |

使用 **[[ ... ]]** 条件判断结构，而不是 **[ ... ]**，能够防止脚本中的许多逻辑错误。比如，**&&**、**||**、**<** 和 **>** 操作符能够正常存在于 **[[ ]]** 条件判断结构中，但是如果出现在 **[ ]** 结构中的话，会报错。



## 传递参数

| 参数处理 | 说明                                                         |
| :------- | :----------------------------------------------------------- |
| $#       | 传递到脚本的参数个数                                         |
| $*       | 以一个单字符串显示所有向脚本传递的参数。 <br />如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。 |
| $$       | 脚本运行的当前进程ID号                                       |
| $!       | 后台运行的最后一个进程的ID号                                 |
| $@       | 与$*相同，但是使用时加引号，并在引号中返回每个参数。 <br/>如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。 |
| $-       | 显示Shell使用的当前选项，与[set命令](https://www.runoob.com/linux/linux-comm-set.html)功能相同。 |
| $?       | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |
